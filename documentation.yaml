openapi: 3.1.0
info:
  title: FastAPI
  version: 0.1.0
paths:
  /auth/jwt/login:
    post:
      tags:
        - auth
      summary: Auth:Jwt.Login
      operationId: auth_jwt_login_auth_jwt_login_post
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Body_auth_jwt_login_auth_jwt_login_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BearerResponse'
              example:
                access_token: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiOTIyMWZmYzktNjQwZi00MzcyLTg2ZDMtY2U2NDJjYmE1NjAzIiwiYXVkIjoiZmFzdGFwaS11c2VyczphdXRoIiwiZXhwIjoxNTcxNTA0MTkzfQ.M10bjOe45I5Ncu_uXvOmVV8QxnL-nZfcH96U90JaocI
                token_type: bearer
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                LOGIN_BAD_CREDENTIALS:
                  summary: Bad credentials or the user is inactive.
                  value:
                    detail: LOGIN_BAD_CREDENTIALS
                LOGIN_USER_NOT_VERIFIED:
                  summary: The user is not verified.
                  value:
                    detail: LOGIN_USER_NOT_VERIFIED
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/jwt/logout:
    post:
      tags:
        - auth
      summary: Auth:Jwt.Logout
      operationId: auth_jwt_logout_auth_jwt_logout_post
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '401':
          description: Missing token or inactive user.
      security:
        - OAuth2PasswordBearer: []
  /auth/register:
    post:
      tags:
        - auth
      summary: Register:Register
      operationId: register_register_auth_register_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
        required: true
      responses:
        '201':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                REGISTER_USER_ALREADY_EXISTS:
                  summary: A user with this email already exists.
                  value:
                    detail: REGISTER_USER_ALREADY_EXISTS
                REGISTER_INVALID_PASSWORD:
                  summary: Password validation failed.
                  value:
                    detail:
                      code: REGISTER_INVALID_PASSWORD
                      reason: Password should beat least 3 characters
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/request-verify-token:
    post:
      tags:
        - auth
      summary: Verify:Request-Token
      operationId: verify_request_token_auth_request_verify_token_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_verify_request_token_auth_request_verify_token_post'
        required: true
      responses:
        '202':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/verify:
    post:
      tags:
        - auth
      summary: Verify:Verify
      operationId: verify_verify_auth_verify_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_verify_verify_auth_verify_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                VERIFY_USER_BAD_TOKEN:
                  summary: Bad token, not existing user ornot the e-mail currently set for the user.
                  value:
                    detail: VERIFY_USER_BAD_TOKEN
                VERIFY_USER_ALREADY_VERIFIED:
                  summary: The user is already verified.
                  value:
                    detail: VERIFY_USER_ALREADY_VERIFIED
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/forgot-password:
    post:
      tags:
        - auth
      summary: Reset:Forgot Password
      operationId: reset_forgot_password_auth_forgot_password_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_reset_forgot_password_auth_forgot_password_post'
        required: true
      responses:
        '202':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /auth/reset-password:
    post:
      tags:
        - auth
      summary: Reset:Reset Password
      operationId: reset_reset_password_auth_reset_password_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Body_reset_reset_password_auth_reset_password_post'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema: {}
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                RESET_PASSWORD_BAD_TOKEN:
                  summary: Bad or expired token.
                  value:
                    detail: RESET_PASSWORD_BAD_TOKEN
                RESET_PASSWORD_INVALID_PASSWORD:
                  summary: Password validation failed.
                  value:
                    detail:
                      code: RESET_PASSWORD_INVALID_PASSWORD
                      reason: Password should be at least 3 characters
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /users/me:
    get:
      tags:
        - users
      summary: Users:Current User
      operationId: users_current_user_users_me_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '401':
          description: Missing token or inactive user.
      security:
        - OAuth2PasswordBearer: []
    patch:
      tags:
        - users
      summary: Users:Patch Current User
      operationId: users_patch_current_user_users_me_patch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorModel'
              examples:
                UPDATE_USER_EMAIL_ALREADY_EXISTS:
                  summary: A user with this email already exists.
                  value:
                    detail: UPDATE_USER_EMAIL_ALREADY_EXISTS
                UPDATE_USER_INVALID_PASSWORD:
                  summary: Password validation failed.
                  value:
                    detail:
                      code: UPDATE_USER_INVALID_PASSWORD
                      reason: Password should beat least 3 characters
        '401':
          description: Missing token or inactive user.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /users/{id}:
    get:
      tags:
        - users
      summary: Users:User
      operationId: users_user_users__id__get
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '401':
          description: Missing token or inactive user.
        '403':
          description: Not a superuser.
        '404':
          description: The user does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    patch:
      tags:
        - users
      summary: Users:Patch User
      operationId: users_patch_user_users__id__patch
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRead'
        '400':
          content:
            application/json:
              examples:
                UPDATE_USER_EMAIL_ALREADY_EXISTS:
                  summary: A user with this email already exists.
                  value:
                    detail: UPDATE_USER_EMAIL_ALREADY_EXISTS
                UPDATE_USER_INVALID_PASSWORD:
                  summary: Password validation failed.
                  value:
                    detail:
                      code: UPDATE_USER_INVALID_PASSWORD
                      reason: Password should beat least 3 characters
              schema:
                $ref: '#/components/schemas/ErrorModel'
          description: Bad Request
        '401':
          description: Missing token or inactive user.
        '403':
          description: Not a superuser.
        '404':
          description: The user does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    delete:
      tags:
        - users
      summary: Users:Delete User
      operationId: users_delete_user_users__id__delete
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            title: Id
      responses:
        '204':
          description: Successful Response
        '401':
          description: Missing token or inactive user.
        '403':
          description: Not a superuser.
        '404':
          description: The user does not exist.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
  /profile:
    get:
      tags:
        - profile
      summary: Get Profile
      operationId: get_profile_profile_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileRead'
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '500':
          description: Profile not found.
      security:
        - OAuth2PasswordBearer: []
    put:
      tags:
        - profile
      summary: Edit Profile
      operationId: edit_profile_profile_put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_ProfileRead_'
        '400':
          description: Can't set distance_limit without location.
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Profile not found.
      security:
        - OAuth2PasswordBearer: []
  /definitions:
    get:
      tags:
        - values
      summary: Get Definitions
      operationId: get_definitions_definitions_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ValueTitleRead'
                type: array
                title: Response Get Definitions Definitions Get
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '500':
          description: Definitions not found.
      security:
        - OAuth2PasswordBearer: []
  /attitudes:
    get:
      tags:
        - values
      summary: Get Attitudes
      operationId: get_attitudes_attitudes_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AttitudeRead'
                type: array
                title: Response Get Attitudes Attitudes Get
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '500':
          description: Attitudes not found.
      security:
        - OAuth2PasswordBearer: []
  /my_values:
    get:
      tags:
        - values
      summary: Get Moral Profile
      operationId: get_moral_profile_my_values_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_MoralProfileRead_'
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '404':
          description: Personal values have not yet been set.
      security:
        - OAuth2PasswordBearer: []
    put:
      tags:
        - values
      summary: Edit Moral Profile
      operationId: edit_moral_profile_my_values_put
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoralProfileCreateUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_MoralProfileRead_'
        '400':
          description: Inconsistent polarity/user_order. / Incorrect attitude_id. / Missing/extra values/aspects.
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '404':
          description: Personal values have not yet been set.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Profile not found. / Personal values not found after update.
      security:
        - OAuth2PasswordBearer: []
    post:
      tags:
        - values
      summary: Post Moral Profile
      operationId: post_moral_profile_my_values_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MoralProfileCreateUpdate'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_MoralProfileRead_'
        '400':
          description: Inconsistent polarity/user_order. / Incorrect attitude_id. / Missing/extra values/aspects.
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '409':
          description: Personal values are already set.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
        '500':
          description: Profile not found. / Personal values not found after creation.
      security:
        - OAuth2PasswordBearer: []
  /check_for_alike:
    get:
      tags:
        - contacts
      summary: Check For Alike
      operationId: check_for_alike_check_for_alike_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse_list_RecomendationRead__'
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Temporarily unavailable.
        '404':
          description: Profile values have not yet been set.
        '500':
          description: Profile not found. / Contact not found right after creation. / To many contacts found.
      security:
        - OAuth2PasswordBearer: []
  /agree_to_start:
    post:
      tags:
        - contacts
      summary: Agree To Start
      operationId: agree_to_start_agree_to_start_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgreeSchema'
        required: true
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '404':
          description: Requested user not found.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
      security:
        - OAuth2PasswordBearer: []
  /contacts:
    get:
      tags:
        - contacts
      summary: Contacts
      operationId: contacts_contacts_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactsRead'
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
      security:
        - OAuth2PasswordBearer: []
  /messages/unread_count:
    get:
      tags:
        - contacts
      summary: Count Unread Messages
      operationId: count_unread_messages_messages_unread_count_get
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnreadMessagesCount'
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
      security:
        - OAuth2PasswordBearer: []
  /messages:
    get:
      tags:
        - contacts
      summary: Get Messages
      operationId: get_messages_messages_get
      security:
        - OAuth2PasswordBearer: []
      parameters:
        - name: contact_user_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
            title: Contact User Id
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MessageRead'
                title: Response Get Messages Messages Get
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
    post:
      tags:
        - contacts
      summary: Send Message
      operationId: send_message_messages_post
      security:
        - OAuth2PasswordBearer: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreate'
      responses:
        '200':
          description: Successful Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageCreate'
        '401':
          description: Unauthorized / inactive account.
        '403':
          description: Unverified.
        '404':
          description: Contact not found.
        '422':
          description: Validation Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
components:
  schemas:
    AgreeSchema:
      properties:
        user_id:
          type: string
          format: uuid
          title: User Id
      type: object
      required:
        - user_id
      title: AgreeSchema
    ApiResponse:
      properties:
        data:
          anyOf:
            - {}
            - type: 'null'
          title: Data
        message:
          anyOf:
            - type: string
            - type: 'null'
          title: Message
      type: object
      title: ApiResponse
    ApiResponse_MoralProfileRead_:
      properties:
        data:
          anyOf:
            - $ref: '#/components/schemas/MoralProfileRead'
            - type: 'null'
        message:
          anyOf:
            - type: string
            - type: 'null'
          title: Message
      type: object
      title: ApiResponse[MoralProfileRead]
    ApiResponse_ProfileRead_:
      properties:
        data:
          anyOf:
            - $ref: '#/components/schemas/ProfileRead'
            - type: 'null'
        message:
          anyOf:
            - type: string
            - type: 'null'
          title: Message
      type: object
      title: ApiResponse[ProfileRead]
    ApiResponse_list_RecomendationRead__:
      properties:
        data:
          anyOf:
            - items:
                $ref: '#/components/schemas/RecomendationRead'
              type: array
            - type: 'null'
          title: Data
        message:
          anyOf:
            - type: string
            - type: 'null'
          title: Message
      type: object
      title: ApiResponse[list[RecomendationRead]]
    AspectRead:
      properties:
        id:
          type: integer
          title: Id
        key_phrase:
          type: string
          title: Key Phrase
        statement:
          type: string
          title: Statement
      type: object
      required:
        - id
        - key_phrase
        - statement
      title: AspectRead
    AttitudeRead:
      properties:
        id:
          type: integer
          title: Id
        statement:
          type: string
          title: Statement
      type: object
      required:
        - id
        - statement
      title: AttitudeRead
    BearerResponse:
      properties:
        access_token:
          type: string
          title: Access Token
        token_type:
          type: string
          title: Token Type
      type: object
      required:
        - access_token
        - token_type
      title: BearerResponse
    Body_auth_jwt_login_auth_jwt_login_post:
      properties:
        grant_type:
          anyOf:
            - type: string
              pattern: ^password$
            - type: 'null'
          title: Grant Type
        username:
          type: string
          title: Username
        password:
          type: string
          format: password
          title: Password
        scope:
          type: string
          title: Scope
          default: ''
        client_id:
          anyOf:
            - type: string
            - type: 'null'
          title: Client Id
        client_secret:
          anyOf:
            - type: string
            - type: 'null'
          format: password
          title: Client Secret
      type: object
      required:
        - username
        - password
      title: Body_auth_jwt_login_auth_jwt_login_post
    Body_reset_forgot_password_auth_forgot_password_post:
      properties:
        email:
          type: string
          format: email
          title: Email
      type: object
      required:
        - email
      title: Body_reset_forgot_password_auth_forgot_password_post
    Body_reset_reset_password_auth_reset_password_post:
      properties:
        token:
          type: string
          title: Token
        password:
          type: string
          title: Password
      type: object
      required:
        - token
        - password
      title: Body_reset_reset_password_auth_reset_password_post
    Body_verify_request_token_auth_request_verify_token_post:
      properties:
        email:
          type: string
          format: email
          title: Email
      type: object
      required:
        - email
      title: Body_verify_request_token_auth_request_verify_token_post
    Body_verify_verify_auth_verify_post:
      properties:
        token:
          type: string
          title: Token
      type: object
      required:
        - token
      title: Body_verify_verify_auth_verify_post
    ContactRead:
      properties:
        name:
          anyOf:
            - type: string
            - type: 'null'
          title: Name
        status:
          $ref: '#/components/schemas/ContactStatus'
        similarity_score:
          type: number
          title: Similarity Score
        distance:
          anyOf:
            - type: number
            - type: 'null'
          title: Distance
        user_id:
          type: string
          format: uuid
          title: User Id
        created_at:
          type: string
          format: date-time
          title: Created At
      type: object
      required:
        - name
        - status
        - similarity_score
        - distance
        - user_id
        - created_at
      title: ContactRead
    ContactStatus:
      type: string
      enum:
        - awaits
        - rejected
        - ongoing
        - closed
      title: ContactStatus
    ContactsRead:
      properties:
        contacts:
          items:
            $ref: '#/components/schemas/ContactRead'
          type: array
          title: Contacts
          default: []
      type: object
      title: ContactsRead
    ErrorModel:
      properties:
        detail:
          anyOf:
            - type: string
            - additionalProperties:
                type: string
              type: object
          title: Detail
      type: object
      required:
        - detail
      title: ErrorModel
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          type: array
          title: Detail
      type: object
      title: HTTPValidationError
    MessageCreate:
      properties:
        receiver_id:
          type: string
          format: uuid
          title: Receiver Id
        content:
          type: string
          maxLength: 2000
          title: Content
      type: object
      required:
        - receiver_id
        - content
      title: MessageCreate
    MessageRead:
      properties:
        id:
          type: integer
          title: Id
        sender_id:
          type: string
          format: uuid
          title: Sender Id
        sender_name:
          anyOf:
            - type: string
            - type: 'null'
          title: Sender Name
        receiver_id:
          type: string
          format: uuid
          title: Receiver Id
        receiver_name:
          anyOf:
            - type: string
            - type: 'null'
          title: Receiver Name
        content:
          type: string
          maxLength: 2000
          title: Content
        created_at:
          type: string
          format: date-time
          title: Created At
      type: object
      required:
        - id
        - sender_id
        - sender_name
        - receiver_id
        - receiver_name
        - content
        - created_at
      title: MessageRead
    MoralProfileCreateUpdate:
      properties:
        attitude_id:
          type: integer
          title: Attitude Id
        value_links:
          items:
            $ref: '#/components/schemas/PersonalValueCreate'
          type: array
          title: Value Links
      type: object
      required:
        - attitude_id
        - value_links
      title: MoralProfileCreateUpdate
    MoralProfileRead:
      properties:
        attitude_id:
          type: integer
          title: Attitude Id
        attitude_statement:
          type: string
          title: Attitude Statement
        value_links:
          items:
            $ref: '#/components/schemas/PersonalValueRead'
          type: array
          title: Value Links
      type: object
      required:
        - attitude_id
        - attitude_statement
        - value_links
      title: MoralProfileRead
    PersonalAspectCreate:
      properties:
        aspect_id:
          type: integer
          title: Aspect Id
        included:
          type: boolean
          title: Included
      type: object
      required:
        - aspect_id
        - included
      title: PersonalAspectCreate
    PersonalAspectRead:
      properties:
        aspect_id:
          type: integer
          title: Aspect Id
        aspect_key_phrase:
          type: string
          title: Aspect Key Phrase
        aspect_statement:
          type: string
          title: Aspect Statement
        included:
          type: boolean
          title: Included
      type: object
      required:
        - aspect_id
        - aspect_key_phrase
        - aspect_statement
        - included
      title: PersonalAspectRead
    PersonalValueCreate:
      properties:
        value_title_id:
          type: integer
          title: Value Title Id
        polarity:
          type: string
          enum:
            - positive
            - negative
            - neutral
          title: Polarity
        user_order:
          type: integer
          maximum: 11
          minimum: 1
          title: User Order
        aspects:
          items:
            $ref: '#/components/schemas/PersonalAspectCreate'
          type: array
          title: Aspects
      type: object
      required:
        - value_title_id
        - polarity
        - user_order
        - aspects
      title: PersonalValueCreate
    PersonalValueRead:
      properties:
        value_title_id:
          type: integer
          title: Value Title Id
        value_title_name:
          type: string
          title: Value Title Name
        polarity:
          type: string
          title: Polarity
        user_order:
          type: integer
          title: User Order
        aspects:
          items:
            $ref: '#/components/schemas/PersonalAspectRead'
          type: array
          title: Aspects
      type: object
      required:
        - value_title_id
        - value_title_name
        - polarity
        - user_order
        - aspects
      title: PersonalValueRead
    ProfileRead:
      properties:
        name:
          anyOf:
            - type: string
            - type: 'null'
          title: Name
        languages:
          items:
            type: string
          type: array
          title: Languages
        location:
          anyOf:
            - type: string
            - type: 'null'
          title: Location
        distance_limit:
          anyOf:
            - type: integer
            - type: 'null'
          title: Distance Limit
        avatar:
          anyOf:
            - type: string
            - type: 'null'
          title: Avatar
        recommend_me:
          type: boolean
          title: Recommend Me
      type: object
      required:
        - name
        - languages
        - location
        - distance_limit
        - avatar
        - recommend_me
      title: ProfileRead
    ProfileUpdate:
      properties:
        longitude:
          anyOf:
            - type: number
              maximum: 180
              minimum: -180
            - type: string
            - type: 'null'
          title: Longitude
        latitude:
          anyOf:
            - type: number
              maximum: 90
              minimum: -90
            - type: string
            - type: 'null'
          title: Latitude
        avatar:
          anyOf:
            - type: string
              maxLength: 2048
              minLength: 1
              format: uri
            - type: 'null'
          title: Avatar
        name:
          anyOf:
            - type: string
              maxLength: 100
            - type: 'null'
          title: Name
          examples:
            - John Doe
        distance_limit:
          anyOf:
            - type: integer
              maximum: 20037509
              exclusiveMinimum: 0
            - type: 'null'
          title: Distance Limit
        languages:
          items:
            type: string
          type: array
          title: Languages
        recommend_me:
          type: boolean
          title: Recommend Me
      type: object
      required:
        - longitude
        - latitude
        - avatar
        - name
        - distance_limit
        - languages
        - recommend_me
      title: ProfileUpdate
    RecomendationRead:
      properties:
        recommended_user_id:
          type: string
          format: uuid
          title: Recommended User Id
        recommended_user_name:
          anyOf:
            - type: string
            - type: 'null'
          title: Recommended User Name
        similarity_score:
          type: number
          title: Similarity Score
        distance_meters:
          anyOf:
            - type: integer
            - type: 'null'
          title: Distance Meters
      type: object
      required:
        - recommended_user_id
        - recommended_user_name
        - similarity_score
      title: RecomendationRead
      description: Model for reading Rows retrived from 'recommendations' mat. view.
    UnreadMessagesCount:
      properties:
        total:
          type: integer
          title: Total
        contacts:
          items:
            $ref: '#/components/schemas/UnreadMessagesCountByContact'
          type: array
          title: Contacts
      type: object
      required:
        - total
        - contacts
      title: UnreadMessagesCount
    UnreadMessagesCountByContact:
      properties:
        sender_id:
          type: string
          format: uuid
          title: Sender Id
        number:
          type: integer
          title: Number
      type: object
      required:
        - sender_id
        - number
      title: UnreadMessagesCountByContact
    UserCreate:
      properties:
        email:
          type: string
          maxLength: 320
          format: email
          title: Email
          examples:
            - johndoe@example.com
        password:
          type: string
          maxLength: 128
          minLength: 8
          title: Password
          examples:
            - z2t6KUyJu3QB
        is_active:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Is Active
          default: true
        is_superuser:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Is Superuser
          default: false
        is_verified:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Is Verified
          default: false
      type: object
      required:
        - email
        - password
      title: UserCreate
    UserRead:
      properties:
        id:
          type: string
          format: uuid
          title: Id
        email:
          type: string
          title: Email
        is_active:
          type: boolean
          title: Is Active
          default: true
        is_superuser:
          type: boolean
          title: Is Superuser
          default: false
        is_verified:
          type: boolean
          title: Is Verified
          default: false
      type: object
      required:
        - id
        - email
      title: UserRead
    UserUpdate:
      properties:
        password:
          anyOf:
            - type: string
              maxLength: 128
              minLength: 8
            - type: 'null'
          title: Password
          examples:
            - z2t6KUyJu3QB
        email:
          anyOf:
            - type: string
              maxLength: 320
              format: email
            - type: 'null'
          title: Email
          examples:
            - johndoe@example.com
        is_active:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Is Active
        is_superuser:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Is Superuser
        is_verified:
          anyOf:
            - type: boolean
            - type: 'null'
          title: Is Verified
      type: object
      title: UserUpdate
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
              - type: string
              - type: integer
          type: array
          title: Location
        msg:
          type: string
          title: Message
        type:
          type: string
          title: Error Type
      type: object
      required:
        - loc
        - msg
        - type
      title: ValidationError
    ValueTitleRead:
      properties:
        id:
          type: integer
          title: Id
        name:
          type: string
          title: Name
        aspects:
          items:
            $ref: '#/components/schemas/AspectRead'
          type: array
          title: Aspects
      type: object
      required:
        - id
        - name
        - aspects
      title: ValueTitleRead
  securitySchemes:
    OAuth2PasswordBearer:
      type: oauth2
      flows:
        password:
          scopes: {}
          tokenUrl: auth/jwt/login
